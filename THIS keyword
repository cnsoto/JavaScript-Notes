Introduction

JavaScript is a programming language that uses lexical scope with function scope to define the variables values,
except for the **THIS** keyword, which is a variable whos value seems to change strangely and that we cannot control.

The reason to this behavior is that the object **THIS** has some kind of **dynamic scope** to define it's value, 
that's why on execution time **THIS** changes to values that we didn't defined in our code.

The changes of **THIS** values are do to the close relationship between the **THIS** object and the **execution context** in JavaScript: 
"If the execution context changes also the **THIS** value". The **execution context** is decided at **execution time** taking into 
consideration the owner object of the function being call (although the object reference can change according with the JavaScript rules, for example:
a function being call inside an object's method).
----------------------------------
JS Code

let person = {
  name:"Carlos",
  talk: function(){
    let text= 'Mi name is';
    function innerfunction(){
      console.log(`${text} + ${this.name}`);
    }
    innerfunction();
  }
}
----------------------------------

This is the object who "this" store a reference that defines the execution reference in the actual code line JavaScript program. During the
**execution time** of a JavaScript program the execution context changes. 

How it gets its value
Since a function can be call diferent ways (implicit, explicit, event listenes, others.), and also the same function can have diferent execution context, 
in other words, a function can have diferents values for "this" keyword. An easy way to know the value of "this" is to determine how the function that 
contains the "this" keyword was call at execution time. 
Another way to know the value of "this" is to answer the question: Who call the function?

In execution time who can call a function to execute can be the Global object (window if we are working on a browser, global object on NodeJS), 
objects (a define structure with methods and properties), DOM elements, primitives data type (string, boolean, number, bigint, undefined, symbol) 
being all posibles values of "this".

In JavaScript is not posible to alter how the lexical scope works, but it is possible to control the execution context in which we call our functions. 
We can control and fixed the value of "this" with: clousure, call, apply, bind and arrow functions.
----------------
JS code

function boo(){ return this+13}
function foo(){ return typeof this}
function buzz(){ return this}
function too(){ return `${typeof this} 13`}
var roles = Symbol("rol")
boo.call(1)// 14
boo.call("12")// "1213"
boo.call(true)// 14
boo.call(false)// 13
boo.call(0.3)// 13.3
typeof roles// "symbol"
boo.call(roles)// Uncaught TypeError: Cannot convert a Symbol value to a number
foo.call(roles)// "object"
buzz.call(roles)// Symbol {Symbol(rol)}
too.call(roles)// "object 13"

---------------------------

Now that we know the "this" object it is important to understand how it is bind to the scope:

this binding { -implicit
               -explicit
               -new
               -Default(window)
               -Lexical
