Introduction

JavaScript is a programming language that uses lexical scope with function scope to determine the values of their variables.
The exception to the rule is the "this" keyword, which is a variable whos value seems to change strangely and we cannot control it.
To understand this behavior let's get to know it.

The object "this" has some kind of dymanic scope to define it's value, which change on execution time to values that we didn't 
defined in our code.

What it is
The reason for this behavior is the close relationship between the object "THIS" and the 'execution context in JavaScript': 
"If the execution context changes also the value of 'THIS' change". The 'execution context' is decided at 'execution time' taking into 
consideration the owner object of the function being call (although the object reference can change according with the JavaScript rules, for example:
a function being call inside an object's method
JS Code

let person = {
  name:"Carlos",
  talk: function(){
    let text= 'Mi name is';
    function innerfunction(){
      console.log(`${text} + ${this.name}`);
    }
    innerfunction();
  }
}

). 

This is the object who "this" store a reference that defines the execution reference in the actual code line JavaScript program.

How it gets its value
A function can be call diferent ways (implicit, explicit, event listenes, others.), and also the same function can have diferent execution context, 
in other words, a function can have diferent value for "this" keyword. An easy way to know the value of "this" is to determine how the function that 
contains the "this" keyword was call at execution time. 
Another way to know the value of "this" is to answer the question: How call the function?

In execution time who can call a function to execute can be the Global object (window if we are working on a browser, global object on NodeJS), 
objects (a define structure with methods and properties), DOM elements, primitives data type (string, boolean, number, bigint, undefined, symbol) 
being all posibles values of "this".

In JavaScript is not posible to alter how the lexical scope works, but it is possible to control the execution context in which we call our functions. 
We can control and fixed the value of "this" with: clousure, call, apply, bind and arrow functions.

Now that we know the "this" object it is important to understand how it is bind to the scope:

this binding { -implicit
               -explicit
               -new
               -Default(window)
               -Lexical
